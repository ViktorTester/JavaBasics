package day16_Abstraction;

// Объявление интерфейса
interface Shape1 {

    int len = 10; // По дефолту final и static
    int width = 20; // По дефолту final и static

  // Объявление абстрактного метода
    // Абстрактный метод можно только объявить
    // Если раскрыть фигурные скобки (даже ничего там не написав),
    // Пользователь тут же получит ошибку
    void circle();  // По дефолту public

  // Объявление дефолтного метода
    // Такой метод является самым обычным методом, который объявляется
    // в простом классе, однако в интерфейсе метод по умолчанию - абстрактный
    // Начиная с Java 8 обычные методы тоже доступны в интерфейсе, однако
    // перед созданием такого метода нужно явно указать ключевое слово - default

    // На такой метод система ругаться не будет
    default void square() {
        System.out.println("This is a square - default method " + len);
    }

  // Объявление статического метода
    // Аналогично и со статическими методами - они также разрешены в
    // интерфейсах. Достаточно указать ключевое слово - static
    static void rectangle(){
        System.out.println("This is a rectangle - static method " + width);
    }

}

// Данный класс может имплементировать интерфейс
// Используем ключевое слово - implements
public class InterfaceScenario1 implements Shape1 {

    // Метод объявлен в интерфейсе и теперь в него можно имплементировать
    // логику через дочерний класс. Тут есть нюанс - метод в интерфейсе по
    // умолчанию - public, метод в классе по умолчанию - default. Если просто
    // прописать в дочернем классе void circle(){}, то система будет ругаться.
    // Метод в дочернем классе также должен быть public, также, как и в
    // родительском интерфейсе. Просто в классе это нужно указать явно
    public void circle() {
        System.out.println("This is a circle - abstract method " + (len + width));
    }

    // У методов square() и rectangle() уже есть имплементация,
    // поэтому никаких действий с ними делать не нужно

    public static void main(String[] args) {

        // Теперь можно создать новый объект класса и работать с его методами
        // класс InterfaceDemo имплементируют интерфейс Shape, поэтому объект
        // такого класса создается по обычным правилам:

        // InterfaceScenario1 id - переменная-ссылка на объект
        // new - ключевое слово создает объект
        // InterfaceScenario1(); - указание на то, объект какого класса нужно создать
        InterfaceScenario1 id = new InterfaceScenario1();

        id.circle();  // This is a circle - abstract method 30
        id.square();  // This is a square - default method 10

        // Объект класса для вызова статического метода в статическом классе
        // не нужен, однако надо указать перед таким методом имя
        // класса (или интерфейса в данном случае), в котором метод был объявлен
        Shape1.rectangle();  // This is a rectangle - static method 20

    }
}
